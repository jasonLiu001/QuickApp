<style lang="less">
    @import '../Common/css/index.less';
</style>

<template>
    <div class="container" style="padding-bottom: 24px;">
        <stack style="height: 100%;flex-direction: row;">
            <!--数据列表-->
            <list class="box" onswipe="listRightSwipeEventHandler" onscrollbottom="loadMoreData">
                <block for="{{(index,row) in list}}">

                    <!--表行数据-->
                    <list-item type="data" class="margin_top">

                        <stack style="height: 100%;">

                            <!--列表正常数据-->
                            <div style="width: 100%;padding:10px;flex-direction: column;border-radius:10px;background-color: #ffffff">
                                <div style="justify-content: space-between">
                                    <text>{{row.period}}</text>
                                    <text>{{row.investTime}}</text>
                                </div>

                                <!--表各列数据-->
                                <block for="{{(columnIndex,columnItem) in displayColumns}}">
                                    <div style="justify-content: space-between">
                                        <text>{{columnItem.des}}:</text>
                                        <text>{{row[columnItem.name]}}</text>
                                    </div>
                                </block>
                            </div>

                            <!--status图标-->
                            <div style="margin-left: 300px;margin-top:40px;opacity:0.5;height: 50px;width: 100px;">
                                <text show="{{row.status===1}}" style="color: #f76160;">已完成</text>
                                <text show="{{row.status===0}}" style="color: #27f730;">进行中</text>
                            </div>

                            <!--isWin图标-->
                            <div style="margin-left: 400px;margin-top:20px;opacity:0.7;height: 70%;width: 100px;">
                                <image show="{{row.isWin===1&&row.status===1}}"
                                       src="{{icons.icon_completed_right}}"></image>
                                <image show="{{row.isWin===0&&row.status===1}}"
                                       src="{{icons.icon_completed_wrong}}"></image>
                            </div>

                        </stack>
                    </list-item>
                </block>

                <!--加载更多-->
                <list-item type="loadMore" style="flex-direction: row;justify-content: center;">
                    <progress type="circular" show="{{hasMoreData}}"></progress>
                    <text show="{{hasMoreData}}">正在载入...</text>
                    <text show="{{!hasMoreData}}">已加载全部</text>
                </list-item>

            </list>

            <!--左侧菜单-->
            <list show="{{isShowLeftMenu}}" onswipe="leftMenuSwipeEventHandler">
                <!--常规菜单项-->
                <block for="{{(ix,apiItem) in apiCollection}}">
                    <list-item type="menuItem" style="flex-direction: row;">
                        <div style="background-color: #f5f5f5;width: 80%;">
                            <a style="height: 120px;width:100%;border-bottom-width: 1px;border-bottom-color: #ffffff;"
                               onclick="clickMenuItemEventHandler(apiItem.name,apiItem.url)">{{apiItem.desc}}</a>
                        </div>
                        <div onclick="clickMaskEventHandler"
                             style="width: 20%;height: 100%;opacity:0.7;background-color: #f5f5f5;"></div>
                    </list-item>
                </block>
            </list>
        </stack>

    </div>
</template>

<script>
    import {investTable, maxProfitTable, apiUrl, iconList, apiCollection} from '../Common/js/data';
    import device from '@system.device'
    import prompt from '@system.prompt';
    import fetch from '@system.fetch';

    export default {
        private: {
            list: [],
            pageIndex: 1,
            selectedMenuName: 'plan01',
            isShowLeftMenu: false,
            hasMoreData: true,

            icons: iconList,
            displayColumns: [{id: 1, name: 'currentAccountBalance', des: '账号余额'}],
            apiCollection: apiCollection,
            screenHeight: 0
        },
        protected: {
            //上个页面传递的参数
            tableName: ''
        },
        getTestArray() {
            let arr = [];
            for (let i = 0; i < 100; i++) {
                arr.push(i + 1);
            }
            return arr;
        },
        clickMenuItemEventHandler(apiName, dataUrl, evt) {
            //重置页索引
            this.pageIndex = 1;
            //重置加载更多
            this.hasMoreData = true;
            //重置当前选择的菜单名称
            this.selectedMenuName = apiName;
            //重置菜单隐藏状态
            this.isShowLeftMenu = false;
            //重置列表数据
            this.list = [];
            //加载新数据
            switch (this.selectedMenuName) {
                case "plan01":
                case "plan02":
                case "plan03":
                case "plan04":
                    this.findInvestInfoList(this.getInvestInfoRequestUrl(dataUrl));
                    break;
                case "before22":
                    break;
                case "before02":
                    break;
            }
        },
        clickMaskEventHandler(evt) {
            this.isShowLeftMenu = false;
        },
        getInvestInfoRequestUrl(dataUrl) {
            let url;
            switch (this.selectedMenuName) {
                case "plan01":
                    url = dataUrl + "?pageIndex=" + this.pageIndex + "&pageSize=20&planType=1";
                    break;
                case "plan02":
                    url = dataUrl + "?pageIndex=" + this.pageIndex + "&pageSize=20&planType=2";
                    break;
                case "plan03":
                    url = dataUrl + "?pageIndex=" + this.pageIndex + "&pageSize=20&planType=3";
                    break;
                case "plan04":
                    url = dataUrl + "?pageIndex=" + this.pageIndex + "&pageSize=20&planType=4";
                    break;
                default:
                    url = dataUrl + "?pageIndex=" + this.pageIndex + "&pageSize=20&planType=1";
            }
            return url;
        },
        findInvestInfoList(url) {
            //console.log(`title: ${JSON.parse(data.data).title}`)
            fetch.fetch({
                url: url,
                method: 'POST',
                success: (data) => {
                    if (data) {
                        //解析 服务器端接口数据
                        let serverData = JSON.parse(data.data);

                        //全部加载完成 隐藏正在载入...
                        if (serverData.data === null || serverData.data === undefined) {
                            this.hasMoreData = false;
                            return;
                        }

                        //遍历数组数据
                        for (let key in serverData.data) {
                            this.list.push(serverData.data[key]);
                        }

                    }
                },
                fail: (data, code) => {
                    console.log(`handling fail, code = ${code}`)
                }
            })
        },
        onInit() {
            device.getInfo({
                success: (ret) => {
                    //console.log(`handling success， screenHeight = ${ret.screenHeight}，screenWith=${ret.screenWidth}`);
                    this.screenHeight = ret.screenHeight - 240;
                }
            })
        },
        onShow() {
            let url = apiUrl.findInvestInfoList + "?pageIndex=" + this.pageIndex + "&pageSize=20&planType=1";
            this.findInvestInfoList(url);
        },
        onMenuPress() {
            this.$app.$def.showMenu();
        },
        loadMoreData() {
            this.pageIndex++;

            switch (this.selectedMenuName) {
                case "plan01":
                case "plan02":
                case "plan03":
                case "plan04":
                    this.findInvestInfoList(this.getInvestInfoRequestUrl(apiUrl.findInvestInfoList));
                    break;
                case "before22":
                    break;
                case "before02":
                    break;
            }
        },
        leftMenuSwipeEventHandler(evt) {
            let direction = evt.direction;
            if (direction === "left") {
                this.isShowLeftMenu = false;
            }
        },
        listRightSwipeEventHandler(evt) {
            //向右滑动显示菜单
            if (evt.direction === "right") {
                this.isShowLeftMenu = true;
            } else {
                //隐藏菜单
                this.isShowLeftMenu = false;
            }
        }
    }
</script>