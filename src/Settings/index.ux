<style lang="less">
    @import '../Common/css/index.less';
</style>

<template>
    <div class="container">
        <list>
            <block for="{{(settingIndex,settingItem) in list}}">
                <list-item type="settingItem"
                           style="justify-content: space-between;align-items:center;height: {{settingItem.key=='siteUrl'?'190px':'140px'}};border-bottom-color: #ffffff;border-bottom-width: 1px;">
                    <div style="flex-direction: column;justify-content: center;width: {{settingItem.key=='siteUrl'?'15%':'50%'}};">
                        <text style="font-size: 24px;">{{settingItem.key}}</text>
                        <text style="font-size: 20px;">{{getDescription(settingItem).desc}}</text>
                        <text style="font-size: 20px;color:{{getDescription(settingItem).mark_fontColor}};">
                            {{getDescription(settingItem).mark}}
                        </text>
                    </div>
                    <input style="width: {{settingItem.key=='siteUrl'?'55%':'30%'}};" type="text" onchange="onChangeEventHandler(settingItem)"
                           id="{{settingItem.key}}"
                           value="{{settingItem.value}}"></input>
                    <a onclick="btnSaveEventHandler(settingItem)"
                       style="height: 90%;color: #ffffff;background-color: #4286f5;width: 20%;text-align: center;">更新</a>
                </list-item>
            </block>

            <!--加载更多-->
            <list-item show="{{isShowLoading}}" type="loadMore" style="flex-direction: row;justify-content: center;">
                <progress type="circular"></progress>
                <text>正在载入...</text>
            </list-item>
        </list>
    </div>
</template>

<script>
    import {apiUrl, iconList, apiCollection} from '../Common/js/data';
    import device from '@system.device'
    import prompt from '@system.prompt';
    import fetch from '@system.fetch';
    import router from '@system.router';

    export default {
        private: {
            isShowLoading: true,
            list: []
        },
        protected: {},
        onInit() {
            this.isShowLoading = true;
            this.$app.$def.findList('GET', this.list, apiUrl.getAllSettings, () => {
                this.isShowLoading = false;
            }, () => {
                this.isShowLoading = false;
            });
        },
        onShow() {
        },

        getDescription(settingItem) {
            let descriptions = {
                desc: '',
                mark: '',
                mark_fontColor: ''
            };
            let desc = '';
            switch (settingItem.key) {
                case 'originAccountBalance'://初始余额
                    descriptions.desc = '初始余额，数据库及配置文件需同时设置且必须一致';
                    descriptions.mark = "运行时无效，启动时有效";
                    //备注字显示成红色
                    descriptions.mark_fontColor = '#f76160';
                    break;
                default:
                    //默认备注字显示绿色
                    descriptions.mark_fontColor = '#27f730';
                    descriptions.desc = settingItem.desc;
                    descriptions.mark = "运行时有效，数据库配置优先";
            }
            return descriptions;
        },
        onChangeEventHandler(settingItem, evt) {
            this.$element(settingItem.key).attr.value = evt.value;
        },
        btnSaveEventHandler(settingItem, evt) {
            let keyValue = this.$element(settingItem.key).attr.value;
            let url = apiUrl.updateSettingsByKey + "?key=" + settingItem.key + "&value=" + keyValue;
            this.$app.$def.updateData(url);
        }
    }
</script>